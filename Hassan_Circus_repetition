from __future__ import annotations
import concurrent.futures
import threading
import time
import random
import queue
from datetime import datetime
from abc import ABC, abstractmethod
from typing import Optional

class Handler(ABC):
    @abstractmethod
    def set_next(self, handler: Handler) -> Handler:
        pass

    @abstractmethod
    def handle(self, request) -> Optional[str]:
        pass

class AbstractHandler(Handler):
    _next_handler: Optional[Handler] = None
    def set_next(self, handler: Handler) -> Handler:
        self._next_handler = handler
        return handler

    @abstractmethod
    def handle(self, customer: Customer) -> Optional[str]:
        if self._next_handler:
            return self._next_handler.handle(customer)
        return None

class Customer:
    def __init__(self, customer_id):
        self.id = customer_id
        self.priority_queue = False if random.random() < 0.7 else True  # 70% chance to be a normal customer

class Attraction(AbstractHandler):
    def __init__(self, capacity: int, duration: int, name: str):
        self.capacity = capacity
        self.current_capacity = 0
        self.lock = threading.Lock()
        self.duration = duration
        self.normal_price = 10
        self.priority_price = 25
        self.total_normal_clients = 0
        self.total_priority_clients = 0
        self.total_normal_profit = 0
        self.total_priority_profit = 0
        self.priority_queue = queue.Queue()
        self.normal_queue = queue.Queue()
        self.name = name
        self.run_count = 0

    def process_customer(self, customer: Customer):
        customer_type = "Priority" if customer.priority_queue else "Normal"
        ticket_price = self.priority_price if customer.priority_queue else self.normal_price
        with self.lock:
            if self.current_capacity >= self.capacity:
                print(f"{self.name} is full. Please wait until the session is over...")
                return "Capacity full"
            self.current_capacity += 1

        self.entry_time = time.time()
        entry_time_str = datetime.fromtimestamp(self.entry_time).strftime('%Y-%m-%d %H:%M:%S')
        print(f"{customer_type} customer {customer.id} entered the {self.name} at {entry_time_str}")

        time.sleep(self.duration)  # Simulate the customer's visit

        self.exit_time = time.time()
        exit_time_str = datetime.fromtimestamp(self.exit_time).strftime('%Y-%m-%d %H:%M:%S')
        print(f"{customer_type} customer {customer.id} left the {self.name} at {exit_time_str}")

        visit_duration = self.exit_time - self.entry_time
        print(f"{customer_type} customer {customer.id} spent {visit_duration:.2f} seconds at the {self.name}")

        with self.lock:
            self.current_capacity -= 1
            if customer.priority_queue:
                self.total_priority_clients += 1
                self.total_priority_profit += ticket_price
            else:
                self.total_normal_clients += 1
                self.total_normal_profit += ticket_price

        # Check if the attraction is the Circus Show and has run less than 3 times
        if self.name == "CircusShow":
            with self.lock:
                self.run_count += 1
                if self.run_count >= 3:
                    print(f"{self.name} has run 3 times and will now close.")
                    return "Closed"

    def handle(self, customer: Customer) -> str:
        queue_used = self.priority_queue if customer.priority_queue else self.normal_queue
        queue_used.put(customer)

        # Check if the attraction is closed
        if self.run_count >= 3 and self.name == "CircusShow":
            return "Closed"

        # Check if there are priority customers waiting
        if not self.priority_queue.empty():
            while not self.priority_queue.empty():
                priority_customer = self.priority_queue.get()
                result = self.process_customer(priority_customer)
                if result == "Closed":
                    return "Closed"
        else:
            # If no priority customers waiting, process normal customers
            while not self.normal_queue.empty():
                normal_customer = self.normal_queue.get()
                result = self.process_customer(normal_customer)
                if result == "Closed":
                    return "Closed"

        return super().handle(customer)

class WaterPark(Attraction):
    def __init__(self):
        super().__init__(capacity=10, duration=random.uniform(2, 6), name="WaterPark")

class RollerCoaster(Attraction):
    def __init__(self):
        super().__init__(capacity=3, duration=random.uniform(1, 3), name="RollerCoaster")

class Shop(Attraction):
    def __init__(self):
        super().__init__(capacity=8, duration=random.uniform(3, 7), name="Shop")

class FerrisWheel(Attraction):
    def __init__(self):
        super().__init__(capacity=6, duration=random.uniform(4, 8), name="FerrisWheel")

class ArcadeGames(Attraction):
    def __init__(self):
        super().__init__(capacity=4, duration=random.uniform(2, 5), name="ArcadeGames")

class CircusShow(Attraction):
    def __init__(self):
        super().__init__(capacity=15, duration=random.uniform(5, 10), name="CircusShow")

def simulate_park_visit(attraction: Attraction, customer: Customer):
    while True:
        result = attraction.handle(customer)
        if result == "Closed":
            break
        elif random.random() < 0.5:  # 50% chance to repeat the same attraction
            continue
        else:
            break

if __name__ == "__main__":
    num_customers = 20
    attractions = [WaterPark(), RollerCoaster(), Shop(), FerrisWheel(), ArcadeGames(), CircusShow()]

    with concurrent.futures.ThreadPoolExecutor() as executor:
        for _ in range(num_customers):
            customer = Customer(str(_))
            attraction = random.choice(attractions)
            executor.submit(simulate_park_visit, attraction, customer)

    total_normal_profit = sum(attraction.total_normal_profit for attraction in attractions if hasattr(attraction, 'total_normal_profit'))
    total_priority_profit = sum(attraction.total_priority_profit for attraction in attractions if hasattr(attraction, 'total_priority_profit'))
    total_normal_clients = sum(attraction.total_normal_clients for attraction in attractions if hasattr(attraction, 'total_normal_clients'))
    total_priority_clients = sum(attraction.total_priority_clients for attraction in attractions if hasattr(attraction, 'total_priority_clients'))
    total_park_profit = total_normal_profit + total_priority_profit

    print("\nSummary:")
    print(f"Total normal clients: {total_normal_clients}")
    print(f"Total priority clients: {total_priority_clients}")
    print(f"Total normal profit: ${total_normal_profit:.2f}")
    print(f"Total priority profit: ${total_priority_profit:.2f}")
    print(f"Total park profit: ${total_park_profit:.2f}")
