from __future__ import annotations
from abc import ABC, abstractmethod
from typing import Any, Optional
import concurrent.futures
import threading
import time
import random
from datetime import datetime

class Handler(ABC):
    """
    The Handler interface declares a method for building the chain of handlers.
    It also declares a method for executing a request.
    """

    @abstractmethod
    def set_next(self, handler: Handler) -> Handler:
        pass

    @abstractmethod
    def handle(self, request) -> Optional[str]:
        pass


class AbstractHandler(Handler):
    """
    The default chaining behavior can be implemented inside a base handler
    class.
    """

    _next_handler: Handler = None

    def set_next(self, handler: Handler) -> Handler:
        self._next_handler = handler
        return handler

    @abstractmethod
    def handle(self, customer: Customer) -> str:
        if self._next_handler:
            return self._next_handler.handle(customer)
        return None


class Customer:
    def __init__(self, customer_id):
        self.id = customer_id


class Attraction(AbstractHandler):
    def __init__(self):
        self.lock = threading.Lock()
        self.capacity = 5
        self.semaphore = threading.Semaphore(self.capacity)
        self.entry_time = 0
        self.exit_time = 0

    def handle(self, customer: Customer) -> str:
        with self.semaphore:
            with self.lock:
                self.entry_time = time.time()
                entry_time_str = datetime.fromtimestamp(self.entry_time).strftime('%Y-%m-%d %H:%M:%S')
                print(f"Customer {customer.id} entered the {self.__class__.__name__} at {entry_time_str}")
                time.sleep(self.visit_duration)  # Simulate the customer's visit
                self.exit_time = time.time()
                exit_time_str = datetime.fromtimestamp(self.exit_time).strftime('%Y-%m-%d %H:%M:%S')
                print(f"Customer {customer.id} left the {self.__class__.__name__} at {exit_time_str}")
                visit_duration = self.exit_time - self.entry_time
                print(f"Customer {customer.id} spent {visit_duration:.2f} seconds at the {self.__class__.__name__}")
        return super().handle(customer)


class WaterPark(Attraction):
    def __init__(self):
        super().__init__()
        self.capacity = 10
        self.visit_duration = random.uniform(2, 6)  # 2 to 6 seconds


class RollerCoaster(Attraction):
    def __init__(self):
        super().__init__()
        self.capacity = 3
        self.visit_duration = random.uniform(1, 3)  # 1 to 3 seconds


class Shop(Attraction):
    def __init__(self):
        super().__init__()
        self.capacity = 8
        self.visit_duration = random.uniform(3, 7)  # 3 to 7 seconds


class FerrisWheel(Attraction):
    def __init__(self):
        super().__init__()
        self.capacity = 6
        self.visit_duration = random.uniform(4, 8)  # 4 to 8 seconds


class ArcadeGames(Attraction):
    def __init__(self):
        super().__init__()
        self.capacity = 4
        self.visit_duration = random.uniform(2, 5)  # 2 to 5 seconds


class CircusShow(Attraction):
    def __init__(self):
        super().__init__()
        self.capacity = 15
        self.visit_duration = random.uniform(5, 10)  # 5 to 10 seconds


def simulate_park_visit(customer: Customer):
    water_park = WaterPark()
    shop = Shop()
    circus_show = CircusShow()
    ferris_wheel = FerrisWheel()
    arcade_games = ArcadeGames()
    roller_coaster = RollerCoaster()

    water_park.set_next(shop)
    shop.set_next(ferris_wheel)
    ferris_wheel.set_next(arcade_games)
    arcade_games.set_next(roller_coaster)
    roller_coaster.set_next(circus_show)

    water_park.handle(customer)


if __name__ == "__main__":
    num_customers = 20
    with concurrent.futures.ThreadPoolExecutor() as executor:
        customers = [Customer(str(i)) for i in range(num_customers)]
        executor.map(simulate_park_visit, customers)

#%%
