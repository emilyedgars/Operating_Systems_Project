from __future__ import annotations
import concurrent.futures
import threading
import time
import random
import queue
from datetime import datetime
from abc import ABC, abstractmethod
from typing import Optional
import mysql.connector

# Previous code
class Handler(ABC):
    @abstractmethod
    def set_next(self, handler: Handler) -> Handler:
        pass

    @abstractmethod
    def handle(self, request) -> Optional[str]:
        pass

class AbstractHandler(Handler):
    _next_handler: Optional[Handler] = None

    def set_next(self, handler: Handler) -> Handler:
        self._next_handler = handler
        return handler

    @abstractmethod
    def handle(self, customer: Customer) -> Optional[str]:
        if self._next_handler:
            return self._next_handler.handle(customer)
        return None

class Customer:
    def __init__(self, customer_id):
        self.id = customer_id
        self.priority_queue = False if random.random() < 0.7 else True  # 70% chance to be a normal customer
        self.spending_money = random.randint(5, 20)  # Random spending money for the shop

class Attraction(AbstractHandler):
    def __init__(self, capacity: int, duration: int):
        self.capacity = capacity
        self.current_capacity = 0
        self.lock = threading.Lock()
        self.duration = duration
        self.normal_price = 10
        self.priority_price = 25
        self.total_normal_clients = 0
        self.total_priority_clients = 0
        self.total_normal_profit = 0
        self.total_priority_profit = 0
        self.visits_count = 0  # Count of visits to this attraction
        self.priority_queue = queue.Queue()
        self.normal_queue = queue.Queue()

    def process_customer(self, customer: Customer):
        customer_type = "Priority" if customer.priority_queue else "Normal"
        ticket_price = self.priority_price if customer.priority_queue else self.normal_price
        with self.lock:
            if self.current_capacity < self.capacity:
                self.current_capacity += 1
                self.visits_count += 1
                if customer.priority_queue:
                    self.total_priority_clients += 1
                    self.total_priority_profit += ticket_price
                else:
                    self.total_normal_clients += 1
                    self.total_normal_profit += ticket_price
            else:
                print(f"{self.__class__.__name__} is full. Please wait until the session is over...")
                return "Capacity full"

        self.entry_time = time.time()
        entry_time_str = datetime.fromtimestamp(self.entry_time).strftime('%Y-%m-%d %H:%M:%S')
        print(f"{customer_type} customer {customer.id} entered the {self.__class__.__name__} at {entry_time_str}")

        time.sleep(self.duration)  # Simulate the customer's visit

        self.exit_time = time.time()
        exit_time_str = datetime.fromtimestamp(self.exit_time).strftime('%Y-%m-%d %H:%M:%S')
        print(f"{customer_type} customer {customer.id} left the {self.__class__.__name__} at {exit_time_str}")

    def handle(self, customer: Customer) -> str:
        queue_used = self.priority_queue if customer.priority_queue else self.normal_queue
        queue_used.put(customer)

        # Check if there are priority customers waiting
        if not self.priority_queue.empty():
            while not self.priority_queue.empty():
                priority_customer = self.priority_queue.get()
                self.process_customer(priority_customer)
        else:
            # If no priority customers waiting, process normal customers
            while not self.normal_queue.empty():
                normal_customer = self.normal_queue.get()
                self.process_customer(normal_customer)

        return super().handle(customer)

class WaterPark(Attraction):
    def __init__(self):
        super().__init__(capacity=10, duration=random.uniform(2, 6))
        self.name = "WaterPark"

class RollerCoaster(Attraction):
    def __init__(self):
        super().__init__(capacity=3, duration=random.uniform(1, 3))
        self.name = "RollerCoaster"

class Shop(Attraction):
    def __init__(self):
        super().__init__(capacity=8, duration=random.uniform(3, 7))
        self.total_sales = 0  # To track additional spending in the shop
        self.name = "Shop"

    def process_customer(self, customer: Customer):
        super().process_customer(customer)
        additional_spending = customer.spending_money
        with self.lock:
            self.total_sales += additional_spending
        print(f"Customer {customer.id} spent an additional ${additional_spending:.2f} in the shop.")

class FoodTruck(Attraction):
    def __init__(self):
        super().__init__(capacity=5, duration=random.uniform(1, 2))
        self.food_price = 5  # Flat rate for simplicity
        self.name = "FoodTruck"

    def process_customer(self, customer: Customer):
        super().process_customer(customer)
        with self.lock:
            self.total_normal_profit += self.food_price
            self.total_normal_clients += 1
        print(f"Customer {customer.id} bought food for ${self.food_price:.2f}.")

class FerrisWheel(Attraction):
    def __init__(self):
        super().__init__(capacity=6, duration=random.uniform(4, 8))
        self.name = "FerrisWheel"

class ArcadeGames(Attraction):
    def __init__(self):
        super().__init__(capacity=4, duration=random.uniform(2, 5))
        self.name = "ArcadeGames"

class CircusShow(Attraction):
    def __init__(self):
        super().__init__(capacity=15, duration=random.uniform(5, 10))
        self.name = "CircusShow"

# New code
class CustomerDatabase:
    def __init__(self):
        self.fake = Faker()

    def generate_customers(self, num_customers: int) -> list[Customer]:
        customers = []
        for _ in range(num_customers):
            customer_id = self.fake.uuid4().split('-')[0]  # Using first part of UUID as ID
            customers.append(Customer(customer_id))
        return customers

def simulate_park_visit(attraction: Attraction, customer: Customer):
    attraction.handle(customer)

if __name__ == "__main__":
    num_customers = 20

    # Create attractions and customers
    attractions = [WaterPark(), RollerCoaster(), Shop(), FerrisWheel(), ArcadeGames(), CircusShow(), FoodTruck()]
    customer_db = CustomerDatabase()
    customers = customer_db.generate_customers(num_customers)

    # Simulate park visits
    with concurrent.futures.ThreadPoolExecutor() as executor:
        for customer in customers:
            attraction = random.choice(attractions)
            executor.submit(simulate_park_visit, attraction, customer)

    # Calculate and print summary statistics
    total_normal_profit = sum(attraction.total_normal_profit for attraction in attractions)
    total_priority_profit = sum(attraction.total_priority_profit for attraction in attractions)
    total_normal_clients = sum(attraction.total_normal_clients for attraction in attractions)
    total_priority_clients = sum(attraction.total_priority_clients for attraction in attractions)
    shop_sales = next((attr.total_sales for attr in attractions if isinstance(attr, Shop)), 0)
    total_park_profit = total_normal_profit + total_priority_profit + shop_sales

    print("\nSummary:")
    print(f"Total normal clients: {total_normal_clients}")
    print(f"Total priority clients: {total_priority_clients}")
    print(f"Total normal profit: ${total_normal_profit:.2f}")
    print(f"Total priority profit: ${total_priority_profit:.2f}")
    print(f"Total shop sales: ${shop_sales:.2f}")
    print(f"Total park profit: ${total_park_profit:.2f}")

    # Determine the most visited attraction
    most_visited = max(attractions, key=lambda x: x.visits_count, default=None)
    if most_visited:
        print(f"{most_visited.__class__.__name__} is the most visited attraction with {most_visited.visits_count} visits.")

    # Connect to MySQL database and insert data
    cnx = mysql.connector.connect(user='root', password='password', host='127.0.0.1', database='example')
    cursor = cnx.cursor()

    # Create AttractionPark table if not exists
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS AttractionPark (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            total_clients INT NOT NULL,
            total_profit DECIMAL(10, 2) NOT NULL
        )
    """)

    # Insert attraction data into the database
    attractions_data = []
    for attraction in attractions:
        attraction_data = (
            attraction.name,
            attraction.total_normal_clients + attraction.total_priority_clients,
            attraction.total_normal_profit + attraction.total_priority_profit
        )
        attractions_data.append(attraction_data)

    cursor.executemany("""
        INSERT INTO AttractionPark (name, total_clients, total_profit) 
        VALUES (%s, %s, %s)
    """, attractions_data)

    # Commit changes and close connection
    cnx.commit()
    cursor.close()
    cnx.close()
